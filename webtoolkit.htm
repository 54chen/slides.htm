<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"> 
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="content-type" content="text/html;charset=UTF-8" />
    <title></title>
    <link href="css/agentzh.css" media="screen" rel="stylesheet" type="text/css" />
  </head>
  <body>
    <div id="canvasToolbar">
      <div class="fl">
        <button onclick="Sporx.home()">|&lt;&lt;</button>
        <button onclick="Sporx.back()">&lt;</button>
        <button onclick="Sporx.forward()">&gt;</button>
        <button onclick="Sporx.end()">&gt;&gt;|</button>
        <input type="text" id="current_page" size="4" onkeypress="if (this.value) Sporx.showPage(parseInt(this.value)-1);" />
        /
        <span id="max_page"></span>
      </div>
      <div class="fr">
        <!--button onclick="Sporx.addPage()">New Page</button-->
        <button onclick="Sporx.toggleEditMode()">Edit</button>
        <button onclick="Sporx.reload()">Reload</button>
      </div>
    </div>
    <div id="canvas"><div id="content"></div></div>
    <iframe style="display:none;" id="dataLoader"></iframe>
    <div id="edit">
      <textarea id="textField"></textarea>
    </div>
    <textarea id="builtinCode" style="width:1px;position:absolute;left:-5px;overflow:hidden;">构建自己的web开发工具箱
----
  
构建自己的
{{#i|web开发工具箱}}
  
☺{{#author|vi-i.blogspot.com}}☺
{{#author|林青 (kindy)}}
{{#date|2009.2.28}}
  
----
  
通过扩展服务器对 {{#c|html}}，{{#c|css}}，{{#c|js}} 文件的支持，
加快开发速度、提高输出质量。
  
+ ➥ Server> 给 html 添加模板语言(如循环、条件等)支持
+ ➥ Server> 添加 css, js 文件的自动压缩、转码支持
+ ➥ Client> 通过 make 加快输出速度
             保证输出质量(unix类，win下可用 cygwin)
  
----
  
html 的模板语言支持(ehtml)
  
  {{#cm|#apache2}}
  {{#kw|AddHandler}} cgi-script .py
  {{#kw|Action}} ehtml-render $path-to-ehtml$/handler.py
  {{#kw|AddHandler}} ehtml-render .ehtml
  
+  {{#cm|#lighttpd}}
  {{#kw|cgi}}.{{#kw|assign}} = ({{#c|".ehtml"}} => {{#c|"$path-to-ehtml$/handler.py"}})
----
  
ehtml 用法
  
 {{#cm|☺}} 文件后缀为 .ehtml
 {{#cm|☺}} 给 html 节点添加必要的 namespace：
    ➥ {{#c|py}} -> http://genshi.edgewall.org/
    ➥ {{#c|xi}} -> http://www.w3.org/2001/XInclude
  
+  &lt;html xmlns={{#c|"http://www.w3.org/1999/xhtml"}}
        xmlns:py={{#c|"http://genshi.edgewall.org/"}}
        xmlns:xi={{#c|"http://www.w3.org/2001/XInclude"}}>
    &lt;xi:include href=\"base.html\" />
    {{#cm|...}}
  &lt;/html>
  
----
  
ehtml {{#kw|for}} 示例
  
  &lt;ul>
    &lt;li {{#x|py:for}}={{#c|"item in [1,2,3]"}}>{{#x|${item}}}&lt;/li>
  &lt;/ul>
  
+  {{#cm|output}}
  &lt;ul>
    &lt;li>1&lt;/li>&lt;li>2&lt;/li>&lt;li>3&lt;/li>
  &lt;/ul>
  
----
  
ehtml {{#kw|if}} 示例
  
  &lt;ul>
    &lt;li {{#x|py:if}}={{#c|"1 == 1"}}> some text &lt;/li>
    &lt;li {{#x|py:if}}={{#c|"1 == 2"}}> some text 2 &lt;/li>
  &lt;/ul>
  
+  {{#cm|output}}
  &lt;ul>
    &lt;li> some text &lt;/li>
  &lt;/ul>
  
----
  
{{#cm|☺}} 演示 {{#cm|☺}}
  
----
  
ehtml 支持的模板语法(1)
  
 逻辑相关
 {{#tag|☆}} for - {{#cm|循环}}
 {{#tag|☆}} if  - {{#cm|判断}}
 {{#tag|☆}} choose -{{#cm|选择，类似switch}}
     when
     otherwise
 {{#tag|☆}} with- {{#cm|变量绑定，类似js中同时使用 var 和 with}}
  
----
  
ehtml 支持的模板语法(2)
  
 dom 相关
 {{#tag|☆}} replace - {{#cm|node 替换}}
 {{#tag|☆}} content - {{#cm|node 内容替换}}
 {{#tag|☆}} attrs   - {{#cm|node 属性操作}}
 {{#tag|☆}} strip   - {{#cm|用 node 的所有子节点替换节点本身，}}
               {{#cm|类似 jquery 中 wrap 的逆操作}}
  
----
  
ehtml 支持的模板语法(3)
  
 代码相关
 {{#tag|☆}} def   - {{#cm|定义一个函数，可以在 ${} 中调用，}}
            {{#cm|一般用于页面中不连续的类似结构}}
 {{#tag|☆}} match - {{#cm|就好象设定一个钩子，}}
            {{#cm|凡是符合定义的节点，都会被自动替换}}
 {{#tag|☆}} comments- {{#cm|注释，这个注释在最终生成的 html 中不会出现，}}
            {{#cm|跟}} {{#tag|&lt;!--}} {{#cm|意义类似}}
 {{#tag|☆}} &lt;?python ?> -{{#cm|这个很像 php ☺}}
+            {{#cm|跟 php 差不多吧，不过这里只能写 python 代码}}
            {{#cm|在数据定义方面，python 跟 js 很类似([],{}),甚至比js更方便}}
  
----
  
资源文件(css,js)操作
  
  {{#tag|➥}} {{#x|文件合并}}
  {{#tag|➥}} {{#x|代码压缩}}
  {{#tag|➥}} 文件编码转换
  
+  {{#cm|#apache2}}
  {{#kw|RewriteRule}} ^(.+\\.dss)$ $path-to-$/dss_process.py?flst=$1 [QSA,PT,L]
  
----
  
示例
  
  &lt;link href=\"/static/css/s1.css\" type=\"text/css\" />
  &lt;link {{#x|href="/static/css/s1.css,s2.css,.dss"}} type=\"text/css\" /> {{#cm|/*dss ~ 动态css*/}}
  &lt;link {{#x|href="/static/css/s1.css,s2.css,.dss?clv=1"}} type=\"text/css\" /> {{#cm|/*clv ~ 压缩率*/}}
  &lt;link {{#x|href="/static/css/s1.css,s2.css,.dss?clv=1&amp;oe=gbk"}} type=\"text/css\" /> {{#cm|/*oe ~ 输出编码*/}}
      {{#cm|/* 对应 oe 的还有 ie ~ 输入编码，如果任何一个不指定，则认为是 utf-8 */}}
  &lt;script type=\"text/javascript\" {{#x|src="/static/js/j1.js"}}>&lt;/script>
  &lt;script type=\"text/javascript\" {{#x|src="/static/js/j1.js,j2.js,.dss?clv=1"}}>&lt;/script>
  
----
  
路径处理规则：
  
  {{#cm|*}} 各文件路径以 逗号分隔；
  {{#cm|*}} 遇到 绝对路径的时候就取绝对路径；
  {{#cm|*}} 遇到相对路径时，以“上次”的 绝对路径 为基准进行处理；
  {{#cm|*}} 遇到文件不存在时跳过（所以最后的 .dss 被当作空文件忽略了）。
  
----
  
CleverCSS
{{#ci|http://sandbox.pocoo.org/clevercss/}}
  
  ul#comments, ol#comments:
    margin: 0
    padding: 0
    li:
      padding: 0.4em
      margin: 0.8em 0 0.8em
      h3:
        font-size: 1.2em
      p:
        padding: 0.3em
      p.meta:
        text-align: right
        color: #ddd
  
----
  
CleverCSS 生成的 css
  
  ul#comments,
  ol#comments {
    margin: 0;
    padding: 0;
  }
  ul#comments li,
  ol#comments li {
    padding: 0.4em;
    margin: 0.8em 0 0.8em;
  }
  ul#comments li h3,
  ol#comments li h3 {
    font-size: 1.2em;
  }
  ul#comments li p,
  ol#comments li p {
    padding: 0.3em;
  }
  
----
  
用 make 来做些之前懒得做的事情
  
+ ➥ 下载浏览器里看到的网页(这在用了 ehtml 后尤为严重 ☺)
 ➥ 复制目录结构，删除不用的东西
 ➥ 将页面需要的相关 css, js 等都下载下来
  
+ 所有这些工作都是简单但繁琐的
  
----
  
make 示例
  
  {{#cm|#Makefile}}
  all: index.html
  
  index.html:
    wget -O index.html http://127.0.0.1/index.ehtml
    wget -O css/main.min.css http://127.0.0.1/static/css/main.css,index.css,.dss?vlc=1
    wget -O js/main.min.js http://127.0.0.1/static/js/main.js,index.js,.dss?vlc=1
    ...
  
----
  
☺ {{#ci|END}} ☺
  
----
  
☺ {{#ci|Any questions}}? ☺
  
----</textarea>
    <script type="text/javascript" src="lib/sporx.js"></script>
  </body>
</html>